// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, GameMaster, PhysicsObject, Ship, Static, User,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require("coffee-script");

  EventEmitter = (require("events")).EventEmitter;

  PhysicsObject = (require("../common/physics")).PhysicsObject;

  Ship = (require("../common/ship")).Ship;

  Static = (require("./static")).Static;

  User = (function() {
    function User(username, session) {
      this.username = username;
      this.session = session;
      this.session.user = this;
    }

    return User;

  })();

  GameMaster = (function(superClass) {
    extend(GameMaster, superClass);

    function GameMaster() {
      this.users = [];
      Static.world.on("add", function(object) {
        var data, i, item, len, ref;
        data = object.toData();
        ref = Static.server.sessions;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          item.client.update(object.toData());
        }
        object.on("fire", function(bullet) {
          return Static.world.add(bullet);
        });
        return object.on("explosion", function(object) {});
      });
    }

    GameMaster.prototype.newUserEnterGame = function(session, username) {
      var createShip, i, item, len, ref, user;
      user = new User(username, session);
      createShip = false;
      ref = Static.world.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        if (item.user && item.user.username === username) {
          item.user = user;
          user.ship = item;
        }
      }
      if (!user.ship) {
        createShip = true;
        user.ship = new Ship({
          id: PhysicsObject.getNewId()
        });
      }
      session.on("end", (function(_this) {
        return function() {
          var index;
          console.log("end session");
          index = _this.users.indexOf(user);
          if (index >= 0) {
            console.log("trim session");
            return _this.users.splice(index, 1);
          }
        };
      })(this));
      user.ship.user = user;
      this.users.push(user);
      if (createShip) {
        Static.world.add(user.ship);
      }
      return user.ship.id;
    };

    GameMaster.prototype.update = function(session, state) {
      var data, i, item, len, ref, ship;
      if (!session.user.ship) {
        console.error("User Dont Has An Ship");
        return null;
      }
      ship = session.user.ship;
      if (ship.state === state) {
        return true;
      }
      ship.state = state;
      data = ship.toData();
      ref = Static.server.sessions;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item.client.update(data);
      }
      return true;
    };

    return GameMaster;

  })(EventEmitter);

  exports.GameMaster = GameMaster;

}).call(this);
