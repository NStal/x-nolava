// Generated by CoffeeScript 1.10.0
(function() {
  var APIEnum, ClientHandler, ClientInterface, ConnectionServer, EventEmitter, GameMaster, GameSession, NodeWSTunnel, SharedSettings, Static, World, remoteAPI, rpc, ws,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ws = require("ws");

  APIEnum = (require("../common/remoteAPI")).APIEnum;

  Static = (require("./static")).Static;

  EventEmitter = (require("events")).EventEmitter;

  rpc = require("../common/rpc");

  GameMaster = (require("./gameMaster")).GameMaster;

  SharedSettings = (require("../common/sharedSettings")).SharedSettings;

  NodeWSTunnel = rpc.NodeWSTunnel;

  remoteAPI = require("../common/remoteAPI");

  ClientInterface = remoteAPI.ClientInterface;

  ClientHandler = remoteAPI.ClientHandler;

  World = (require("../common/physics")).World;

  ConnectionServer = (function(superClass) {
    extend(ConnectionServer, superClass);

    function ConnectionServer(port, host) {
      ConnectionServer.__super__.constructor.call(this);
      this.host = host || "localhost";
      this.port = port || 10423;
      this.listen();
      this.sessions = [];
    }

    ConnectionServer.prototype.listen = function() {
      console.log("conectionserver listen at " + this.host + " " + this.port);
      this.ws = new ws.Server({
        port: this.port
      });
      this.ws.on("connection", (function(_this) {
        return function(ws) {
          var session;
          console.log("connection!");
          session = new GameSession(ws);
          return _this.sessions.push(session);
        };
      })(this));
      return this.ws.on("error", (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this));
    };

    return ConnectionServer;

  })(EventEmitter);

  GameSession = (function(superClass) {
    extend(GameSession, superClass);

    function GameSession(ws) {
      GameSession.__super__.constructor.call(this);
      ws = new NodeWSTunnel(ws);
      this.client = new ClientInterface(ws);
      this.handler = new ClientHandler(ws);
      this.handler.session = this;
      this.client.session = this;
      this.client.on("close", (function(_this) {
        return function() {
          return _this.emit("end");
        };
      })(this));
      this.handler.on("close", (function(_this) {
        return function() {
          return _this.emit("end");
        };
      })(this));
    }

    return GameSession;

  })(EventEmitter);

  (function() {
    Static.world = new World;
    Static.world.init([]);
    Static.server = new ConnectionServer(SharedSettings.serverPort, SharedSettings.serverHost);
    Static.server.on("connection", function(ws) {});
    Static.gameMaster = new GameMaster();
    return setInterval(((function(_this) {
      return function() {
        return Static.world.update();
      };
    })(this)), 1000 / SharedSettings.frameRate);
  })();

}).call(this);
